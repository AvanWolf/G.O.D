<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
    <!ENTITY modGODCore                 "0xDCBA0500">

    <!ENTITY stGODCoreStation           "0xDCBA0501">
    <!ENTITY ovGODTimeStop              "0xDCBA0502">
    <!ENTITY stGODTravelStation         "0xDCBA0503">

    <!ENTITY svGODFriendly              "0xDCBA0504">
    <!ENTITY svGODNeutral               "0xDCBA0505">
    <!ENTITY svGODAggresive             "0xDCBA0506">
]>

<TranscendenceExtension
  UNID="&modGODCore;"
  name="Galactic Omni Device"
  credits="alterecco"
  version="1.1">

<!--

  Bugs:
    Wolfy 12/1/2011
      On Replace Armor screen:
        "No binding for symbol gCheckMilitaryID ###(and gCheckMilitaryID (itmHasModifier..."
      Spawn Objects
        - Add more info in subtitle?

-->

  <Modules>
    <Module filename="ModuleTarget.xml"/>
    <Module filename="ModuleEnhancements.xml"/>
  </Modules>

  <Globals>
    (block nil

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE VARIABLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;; This is a global variable that holds all the modules.
  ;;; We define it like this, since we allow for other
  ;;; files to append their modules as well.
  ;;; Basically it is data to be used for a custompicker list
  (setq god/modules (if (isError god/modules)
    (list)
    god/modules
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ MODULE - REFUEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Refuel")
    (subtitle     "Refuel your reactor.\nIf it is not fully refueled, contact me!")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (god/refuel-player)
        (dsf/notify "Your Reactor has been refueled")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - RESTORE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Restore Player")
    (subtitle     (cat
      "Restore your ship.\n"
      "Refuel, fix damage/items, remove negative states, "
      "reset Domina powers and various timers, "
      "fix bad ranks and standings.\n"
      "Credits for this function goes to PM from Transcendence Forums!"
    ))
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (god/restore-target gPlayerShip)
        (dsf/notify "Restored your ship")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - SPAWN SHIPS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Spawn Ships")
    (subtitle     "Browse and spawn any ship in game. Make them your friends, enemies or wingmen")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/spawn-ships)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (setq dsf/spawn-ships (lambda nil
    (block (spawn)

      (dsf/new-screen 'ship-select "Select Ship" 'custompicker)
      (dsf/filter-screen)

      ;; add ships to the list
      (enum (typFind "s") unid
        (dsf/add-list-entry (list
          (list 'title      (typGetDataField unid 'name))
          (list 'subtitle   (cat "Level: " (typGetDataField unid 'level)))
          (list 'unid       unid)
          (list 'level      (typGetDataField unid 'level))
        ))
      )
      (dsf/add-list-filter (lambda (entries)
        (fn/sort entries a b (gr (fn/get a 'level) (fn/get b 'level)))
      ))
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil
          (dsf/session-set 'unid (dsf/get-list-entry 'unid))
          (dsf/show-screen 'spawn-count)
        )
      ))
      (dsf/set-default-action 'select)
      ;; disable the action if the list is empty
      (dsf/set-disable-action 'select '(dsf/list-is-empty))

      (dsf/new-screen 'spawn-count "Set Spawn Amount")
      (dsf/set-pane 'counter)
      (dsf/on-pane-init (lambda nil (dsf/set-counter 1)))
      (dsf/set-description (lambda (desc) (block (unid)
        (setq unid (dsf/session-get 'unid))
        (cat "Select how many of the type \"" (typGetDataField unid 'name) "\" you want to spawn")
      )))
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil
          (dsf/session-set 'count (dsf/get-counter 1))
          (dsf/show-screen 'spawn-behaviour)
        )
      ))
      (dsf/set-default-action 'select)

      (dsf/new-screen 'spawn-behaviour "Set Spawn Behaviour" 'custompicker)
      (dsf/add-list-entries (list
        '((title      "Wingman")
          (subtitle   "Add as wingman")
          (orders     'wingman)
        )
        '((title      "Enemy")
          (subtitle   "Add as enemy, attacking you")
          (orders     'enemy)
        )
        '((title      "Aggressive Wander")
          (subtitle   "Add as DestructiveChaos, attacking nearest enemies")
          (orders     'aggressive)
        )
        '((title      "Escort")
          (subtitle   "Add as your escort")
          (orders     'escort)
        )
        '((title      "Patrol")
          (subtitle   "Patrol around a random friendly target")
          (orders     'patrol)
        )
        '((title      "Passive")
          (subtitle   "Add as passive (holding)")
          (orders     'passive)
        )
      ))
      (setq spawn (lambda nil
        (block (unid amount orders)
          (setq unid (dsf/session-delete 'unid))
          (setq amount (dsf/session-delete 'count))
          (setq orders (dsf/get-list-entry 'orders))

          (for i 1 amount (block (obj)
            ;; we create all short of the players pos
            (setq obj (sysCreateShip unid (sysVectorPolarOffset gPlayerShip (random 0 359) (random 5 15)) &svIndependent;))
            (switch
              (eq orders 'wingman)
                (block nil
                  (objSetSovereign obj &svIndependent;)
                  (objSetEventHandler obj &baStdWingmanBase;)
                  (objFireEvent obj "OrderJoinPlayer")
                )
              (eq orders 'enemy)
                (block nil
                  (objSetSovereign obj &svPirates;)
                  (shpOrder obj 'attack gPlayerShip)
                )
              (eq orders 'aggressive)
                (block nil
                  (objSetSovereign obj &svDestructiveChaos;)
                  (shpSetCommandCode obj (block nil
                    (shpOrder gSource 'attack (sysFindObject gSource "sTAZN"))
                  ))
                )
              (eq orders 'escort)
                (shpOrder obj 'escort gPlayerShip)
              (eq orders 'patrol)
                (shpOrder obj 'patrol (random (sysFindObject gPlayerShip "TAF")) (random 10 40))
              (eq orders 'passive)
                  (shpOrder obj 'hold)
            )
          ))
        )
      ))
      (dsf/add-action 'spawn '("Spawn And Exit" 'S) (lambda nil (block nil
        (spawn)
        (dsf/exit 'force)
      )))
      (dsf/set-default-action 'spawn)
      (dsf/add-action 'spawn-more '("Spawn and Add More" 'A) (lambda nil (block nil
        (spawn)
        (dsf/show-screen 'spawn-select)
      )))

      (dsf/show-screen 'ship-select)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - SPAWN STATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Spawn Stations")
    (subtitle     "Browse and spawn any station in the game")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block (spawn)
          (dsf/new-screen 'spawn-station "Spawn Station" 'custompicker)
          (dsf/filter-screen)

          (dsf/set-description "\n\nSpawn a single station ten ls due north from you.")

          ;; add stations to the list
          (enum (typFind "t -star; -asteroid; -shipwreck; -planet;") unid
            (if (typGetDataField unid 'name)
              (dsf/add-list-entry (list
                (list 'title      (typGetDataField unid 'name))
                (list 'subtitle   (cat "Level: " (typGetDataField unid 'level)))
                (list 'unid       unid)
                (list 'level      (typGetDataField unid 'level))
              ))
            )
          )
          (dsf/add-list-filter (lambda (entries)
            (fn/sort entries a b (gr (fn/get a 'level) (fn/get b 'level)))
          ))

          ;; make a small function for handling the spawn
          (setq spawn (lambda (code)
            (block (unid obj)
              (setq unid (dsf/get-list-entry 'unid))
              (god/select-position (lambda (pos) (block (obj)
                (setq obj (sysCreateStation unid pos))
                (if code (code obj))
              )))
            )
          ))

          (dsf/add-action 'vanilla '("Vanilla (No Changes)" 'V) (lambda nil
            (block nil
              (spawn (lambda (obj) (block nil
                (dsf/notify "Spawned Unmodified Station")
              )))
            )
          ))
          (dsf/set-default-action 'vanilla)
          (dsf/set-disable-action 'vanilla '(dsf/list-is-empty))
          (dsf/set-no-save 'vanilla)

          (dsf/add-action 'neutral '("Neutral" 'N) (lambda nil
            (block nil
              (spawn (lambda (obj) (block nil
                (objSetSovereign obj &svGODNeutral;)
                (dsf/notify "Spawned Neutral Station")
              )))
            )
          ))
          (dsf/set-disable-action 'neutral '(dsf/list-is-empty))
          (dsf/set-no-save 'neutral)

          (dsf/add-action 'friendly '("Friendly" 'R) (lambda nil
            (block nil
              (spawn (lambda (obj) (block nil
                (objSetSovereign obj &svGODFriendly;)
                (dsf/notify "Spawned Friendly Station")
              )))
            )
          ))
          (dsf/set-disable-action 'friendly '(dsf/list-is-empty))
          (dsf/set-no-save 'friendly)

          (dsf/add-action 'aggressive '("Aggressive" 'A) (lambda nil
            (block nil
              (spawn (lambda (obj) (block nil
                (objSetSovereign obj &svGODAggresive;)
                (dsf/notify "Spawned Aggressive Station")
              )))
            )
          ))
          (dsf/set-disable-action 'aggressive '(dsf/list-is-empty))
          (dsf/set-no-save 'aggressive)

          (dsf/add-action 'custom '("Custom" 'C) (lambda nil
            (block nil
              (spawn (lambda (obj)
                (block nil
                  (dsf/new-screen 'select-sov "Select Sovereign" 'custompicker)
                  (dsf/filter-screen)
                  (dsf/set-description (lambda (desc)
                    (cat desc "\n\nSpawning station: " (objGetName obj 0))
                  ))
                  (enum (typFind "v") sov
                    (dsf/add-list-entry (list
                      (list 'title    (typGetDataField sov 'name))
                      (list 'unid     sov)
                    ))
                  )
                  (dsf/add-action 'select '("Select" 'S) (lambda nil
                    (block (unid)
                      (setq unid (dsf/get-list-entry 'unid))
                      (objSetSovereign obj unid)
                      (dsf/notify (cat "Spawned station as " (typGetDataField unid 'name)))
                      (dsf/back)
                    )
                  ))
                  (dsf/set-default-action 'select)
                  (dsf/set-disable-action 'select '(dsf/list-is-empty))
                  (dsf/set-no-save 'select)
                  (dsf/show-screen)
                )
              ))
            )
          ))
          (dsf/set-disable-action 'custom '(dsf/list-is-empty))

          (dsf/show-screen)
        )
      ))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BROWSE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       2)
    (title        "Browse Items")
    (subtitle     "Browse and search all items in game. Add some to your cargo hold, or install them directly. All items will be identified while browsing.")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'item-browser "Item Browser")
        (dsf/screen-set 'identify-items true)
        (god/item-browser "/*")
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TRAVEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     2)
    (title      "Travel Galaxy")
    (subtitle   "Journey instantly to another system in this galaxy")
    (on-select  (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block ((systems (sysGetNodes))
                (current (sysGetNode)))

          (dsf/new-screen 'travel-galaxy "Travel Galaxy")
          (dsf/filter-screen)

          ;; TODO build a much more advanced system list (in correct order)

          ;; filter out system with unid 0xFFFFFF... that is the endgame system
          ;; also filter out current system
          (setq systems (filter systems sys
            (and
              (not (eq sys current))
              (not (eq (sysGetSystemType sys) 0xFFFFFF))
            )
          ))
          ;; sort by level
          (setq systems (fn/sort systems a b (ls (sysGetLevel a) (sysGetLevel b))))

          ;; add list-entries
          (enum systems s (if (not (eq s current))
            (dsf/add-list-entry (list
              (list 'title (sysGetName s))
              (list 'node s)
            ))
          ))

          (dsf/add-action 'gate '("Select" 'S) (lambda nil (block (node gate)
            (setq node (dsf/get-list-entry 'node))
            (setq gate (item (sysGetStargates node) 0))
            (dsf/exit 'force)
            (objGateTo gPlayerShip node gate &efStargateOut;)
            (plyMessage gPlayer (cat "Gated to " (sysGetName node)))
          )))
          (dsf/set-default-action 'gate)
          (dsf/set-disable-action 'gate '(dsf/list-is-empty))

          (dsf/show-screen)
        )
      ))
      (dsf/set-default-action 'select)

      (dsf/add-action 'all-systms '("Travel Entire Galaxy" 'T) (lambda nil
        (block nil
          (dsf/exit 'force)
          (plyMessage gPlayer "Touring the Galaxy. This may take a while")
          (sysCreateStation &stGODTravelStation; nil)
        )
      ))
    ))
  ))

  (lnkAppend god/modules '(
    (weight     1)
    (title      "Travel Current System")
    (subtitle   "Journey instantly to another place in this system")
    (on-select  (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil

          (dsf/new-screen 'travel-system "Travel System")
          (dsf/screen-set 'default-filter-term "TAMF")
          (dsf/object-browser)

          (dsf/add-action 'jump '("Select" 'S) (lambda nil
            (block (o)
              (setq o (dsf/get-list-entry 'obj))
              (objJumpTo gPlayerShip (sysVectorRandom (objGetPos o) 8 4 "*"))
              (plyMessage gPlayer (cat "Jumped to " (objGetName o)))
              (dsf/exit 'force)
            )
          ))
          (dsf/set-default-action 'jump)
          (dsf/set-disable-action 'jump '(dsf/list-is-empty))

          (dsf/show-screen)
        )
      ))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;  ;; system list edge cases:
;  ;;  - destination system has no gates
;  ;;  - current system has only one gate and it leads somewhere
;  ;;    we have already been
;  ;;  - all systems have been accounted for
;  (setq god/gate-list (lambda (systems current gate)
;    (block (all dest)
;      (setq all (sysGetNodes))
;      (setq dest (sysGetStargateDestinationNode current gate))
; 
;      (switch
;        (eq all systems)
;          nil
;        (eq (count (sysGetStargates dest)) 0)
;          nil
;      )
;    )
;  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - INSTALL DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Install Device")
    (subtitle     "Install any device you have in your cargo hold. You can choose between installing it in the regular way, or forcefully")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (god/install-device))
      )
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (setq god/install-device (lambda nil
    (block nil
      (dsf/new-screen 'install-device "Install Device" 'itempicker)
      (dsf/set-item-filter "dUN")

      (dsf/add-action 'force '("Force Install" 'F) (lambda nil (block (result)
        (setq result (god/install-item (dsf/get-item) nil true))
        (dsf/notify (item result 1))
      )))
      (dsf/set-default-action 'select)
      (dsf/set-no-save 'force true)
      (dsf/set-disable-action 'force '(dsf/list-is-empty))

      (dsf/add-action 'normal '("Normal Install" 'N) (lambda nil (block (result)
        (setq result (god/install-item (dsf/get-item) true true))
        (dsf/notify (item result 1))
      )))
      (dsf/set-no-save 'normal true)
      (dsf/set-disable-action 'normal '(dsf/list-is-empty))

      (dsf/add-action 'add '("Add More Devices" 'A) (lambda nil (block nil
        (dsf/new-screen 'device-browser "Device Browser")
        (god/item-browser "d")
        (dsf/show-screen)
      )))
      (dsf/show-screen)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REMOVE DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Remove Device")
    (subtitle     "Remove any device you have installed on your ship")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRemoveDevice;")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR / REPLACE ARMOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Repair or Replace Armor")
    (subtitle     "Fix up your armor, or replace segments")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gTechLevel 15)
        (setq gArmorSegment 0)
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRepairArmor;")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Repair Item")
    (subtitle     "Fix any item that needs fixing")
    (hide         (block ((do-hide true))
      (objEnumItems gPlayerShip itm
        (if (itmIsDamaged itm) (setq do-hide nil))
      )
      do-hide
    ))
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'repair-item "Repair Item" 'itempicker)
        (dsf/set-item-filter "*d~mUD")
        (dsf/add-action 'repair '("Repair" 'R) (lambda nil
          (block (itm)
            (shpRepairItem gPlayerShip (dsf/get-item))
            (dsf/notify "Repaired Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/set-no-save 'repair true)
        (dsf/set-disable-action 'repair '(dsf/list-is-empty))
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - DAMAGE ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Damage Item")
    (subtitle     "Damage an item... just because")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'repair-item "Repair Item" 'itempicker)
        (dsf/set-item-filter "*d~mUN")
        (dsf/add-action 'damage '("Damage" 'D) (lambda nil
          (block (itm)
            (shpDamageItem gPlayerShip (dsf/get-item))
            (dsf/notify "Damaged Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/set-no-save 'damage true)
        (dsf/set-disable-action 'damage '(dsf/list-is-empty))
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - MAP SYSTEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Map System")
    (subtitle     "Reveal location on map of every station in the current system")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (enum (sysFindObject gSource "Ts") obj
            (objSetKnown obj)
        )
        (dsf/notify "Mapped system")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - LOOT ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Loot All")
    (subtitle     "Loot all items in wrecks within a certain radius in ls\n(Note: this does not respect your cargo limit)")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (if (eq (dsf/get-pane) 'counter)
          (block (radius criteria wrecks (cnt 0))
            (setq radius (dsf/get-counter 0 2000))
            (setq criteria (cat "sTN:" radius))
            (setq wrecks (filter (sysFindObject gPlayerShip criteria) obj
              (or (objHasAttribute obj "shipwreck") (eq (objGetVisibleDamage obj) 100) (strFind (objGetName obj) "wreck"))
            ))
            (enum wrecks obj (block nil
              (objEnumItems obj "*U" itm (block nil
                (setq cnt (add cnt 1))
                (objRemoveItem obj itm)
                (objAddItem gPlayerShip itm)
              ))
              (if (objHasAttribute obj "shipwreck") (objDestroy obj))
            ))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Looted " (fn/plural cnt "item" "items" true)))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify "Enter the ls you want to set as radius. Upper limit is 2000")
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - JETTISON ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Jettison All")
    (subtitle     "Jettison all items in your hold")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (items)
        (if (setq items (objGetItems gPlayerShip "*U"))
          (block (dest)
            (setq dest (sysCreateStation &stCargoCrate; (sysVectorPolarOffset gPlayerShip 0 2)))
            (enum items itm (block nil
              (objRemoveItem gPlayerShip itm)
              (objAddItem dest itm)
            ))
            (dsf/notify "Jettisoned all items")
          )
          (dsf/notify "You have no items onboard to jettison")
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING DEPOSIT CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Deposit Credits")
    (subtitle     "Add credits to your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (if (eq (dsf/get-pane) 'counter)
          (block (credits)
            (plyCredit gPlayer (setq credits (dsf/get-counter 0 10000000)))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Added " credits " credits to your account"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify "Select the amount of credits you want (max 10000000)")
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING WITHDRAW CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Withdraw Credits")
    (subtitle     "Remove credits from your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (mx)
        (setq mx (plyGetCredits gPlayer))
        (if (eq (dsf/get-pane) 'counter)
          (block (credits)
            (plyCharge gPlayer (setq credits (dsf/get-counter 0 mx)))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Withdrew " credits " credits from your account"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "Select the amount of credits you want to remove (max " mx ")"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING DEPOSIT RINS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Deposit Rins")
    (subtitle     "Add rins to your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (rins)
        (setq rins (or (objGetData gPlayerShip 'rins) 0))
        (if (eq (dsf/get-pane) 'counter)
          (block (credit)
            (setq rins (add rins (setq credit (dsf/get-counter 0 10000000))))
            (objSetData gPlayerShip 'rins rins)
            (dsf/set-pane 'default)
            (dsf/notify (cat "Added " credit " rins to your account. You now have " rins " rins"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "You have " rins " rins. How many do you want to add (max 10000000)"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING WITHDRAW RINS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Withdraw Rins")
    (subtitle     "Remove rins from your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (rins)
        (setq rins (objGetData gPlayerShip 'rins))
        (if (eq (dsf/get-pane) 'counter)
          (block (credit)
            (setq rins (subtract rins (setq credit (dsf/get-counter 0 rins))))
            (objSetData gPlayerShip 'rins rins)
            (dsf/set-pane 'default)
            (dsf/notify (cat "Withdraw " credit " rins from your account. You now have " rins " rins"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "Select the amount of rins you want to remove (max " rins ")"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - PLAYER DATA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Player Data")
    (subtitle     "View and change data stored about the player")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (god/player-data)
      ))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (setq god/player-data (lambda nil
    (block nil
      (dsf/new-screen 'player-data "Player Data" 'custompicker)
      (dsf/filter-screen)

      (dsf/add-list-entries (list
        (list
          (list 'title      (lambda nil (cat "FleetLevel: " (objGetData gPlayerShip 'fleetLevel))))
          (list 'subtitle   "Fleet Level (1-6)")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'fleetLevel arg)))
        )
        (list
          (list 'title      (lambda nil (cat "FleetXP: " (objGetData gPlayerShip 'fleetXP))))
          (list 'subtitle   "Fleet Experience Points")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'fleetXP arg)))
        )
        (list
          (list 'title      (lambda nil (cat "FleetTFSuccess: " (objGetData gPlayerShip 'fleetTFSuccess))))
          (list 'subtitle   "Number of successful Task Force missions")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'fleetTFSuccess arg)))
        )
        (list
          (list 'title      (lambda nil (cat "FleetTFFailure: " (objGetData gPlayerShip 'fleetTFFailure))))
          (list 'subtitle   "Number of failed Task Force missions")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'fleetTFFailure arg)))
        )
        (list
          (list 'title      (lambda nil (cat "ArenaBattles: " (objGetData gPlayerShip 'arenaBattles))))
          (list 'subtitle   "Number of battles in the arena")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'arenaBattles arg)))
        )
        (list
          (list 'title      (lambda nil (cat "ArenaRank: " (objGetData gPlayerShip 'arenaRank))))
          (list 'subtitle   "An integer representing the captain's rank.\n0 = Citizen, 1 = Gladiator, 2 = Veteran, 3 = Starfighter")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'arenaRank arg)))
        )
        (list
          (list 'title      (lambda nil (cat "MilitiaRank: " (objGetData gPlayerShip 'militiaRank))))
          (list 'subtitle   "An integer representing the player's rank in militia")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'militiaRank arg)))
        )
        (list
          (list 'title      (lambda nil (cat "MilitiaSuccess: " (objGetData gPlayerShip 'militiaSuccess))))
          (list 'subtitle   "Number of successful Militia missions")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'militiaSuccess arg)))
        )
        (list
          (list 'title      (lambda nil (cat "MilitiaFailure: " (objGetData gPlayerShip 'militiaFailure))))
          (list 'subtitle   "Number of faield Militia missions")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'militiaFailure arg)))
        )
        (list
          (list 'title      (lambda nil  (cat "BlackMarketLevel: " (objGetData gPlayerShip 'blackMarketLevel))))
          (list 'subtitle   "Black market level (1-6)")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'blackMarketLevel arg)))
        )
        (list
          (list 'title      (lambda nil (cat "BlackMarketXP: " (objGetData gPlayerShip 'blackMarketXP))))
          (list 'subtitle   "Black Market experience points")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'blackMarketXP arg)))
        )
        (list
          (list 'title      (lambda nil (cat "BlackMarketCrimeCost: " (objGetData gPlayerShip 'blackMarketCrimeCost))))
          (list 'subtitle   "Price that the player has to pay to stop bounty hunters")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'blackMarketCrimeCost arg)))
        )
        (list
          (list 'title      (lambda nil (cat "CommonCrimeSeverity: " (objGetData gPlayerShip 'commonCrimeSeverity))))
          (list 'subtitle   "Severity of players crime.\n0 = No Crime, 1 = Misdemeanor, 2 = Felony (piracy), 3 = Crimes against Humanity (slave-trading, genocide, mass-destruction)")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'commonCrimeSeverity arg)))
        )
        (list
          (list 'title      (lambda nil (cat "CommonCrimeRecord: " (objGetData gPlayerShip 'commonCrimeRecord))))
          (list 'subtitle   "Number of times player has been caught and released for a felony")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'commonCrimeRecord arg)))
        )
        (list
          (list 'title      (lambda nil (cat "RingerCrimeSeverity: " (objGetData gPlayerShip 'ringerCrimeSeverity))))
          (list 'subtitle   "Severity of crime agains ringers.\n0 = No crime, 1 = Social violation, 2 = Dangerous deviance, 3 = Existential threat")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'ringerCrimeSeverity arg)))
        )
        (list
          (list 'title      (lambda nil (cat "SistersAttitude: " (objGetData gPlayerShip 'sistersAttitude))))
          (list 'subtitle   "Abstract measure of the sisters' attitude towards the player")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'sistersAttitude arg)))
        )
        (list
          (list 'title      (lambda nil (cat "SistersLastDonation: " (objGetData gPlayerShip 'sistersLastDonation))))
          (list 'subtitle   "Time at which the player donated last (Nil if never)")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'sistersLastDonation arg)))
        )
        (list
          (list 'title      (lambda nil (cat "SlaveReward: " (objGetData gPlayerShip 'slaveReward))))
          (list 'subtitle   "Number of slaves for which player has already been rewarded")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'slaveReward arg)))
        )
        (list
          (list 'title      (lambda nil (cat "SlaveSales: " (objGetData gPlayerShip 'slaveSales))))
          (list 'subtitle   "Proceeds from slave sales")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'slaveSales arg)))
        )
        (list
          (list 'title      (lambda nil (cat "SlavesFreed: " (objGetData gPlayerShip 'slavesFreed))))
          (list 'subtitle   "Number of slaves freed to commonwealth authorities")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'slavesFreed arg)))
        )
        (list
          (list 'title      (lambda nil (cat "TualiSymbiote: " (objGetData gPlayerShip 'tualiSymbiote))))
          (list 'subtitle   "Has The Tuali Symbiote been implanted (Must be True or Nil)")
          (list 'func       (lambda (arg) (objSetData gPlayerShip 'tualiSymbiote arg)))
        )
        (list
          (list 'title      (lambda nil (cat "DominaLevel: " (typGetGlobalData &stDomina; "level"))))
          (list 'subtitle   "Your current domina Level")
          (list 'func       (lambda (arg) (typSetGlobalData &stDomina; "level" arg)))
        )
        (list
          (list 'title      (lambda nil (cat "DominaXP: " (typGetGlobalData &stDomina; "xp"))))
          (list 'subtitle   "Domina XP")
          (list 'func       (lambda (arg) (typSetGlobalData &stDomina; "xp" arg)))
        )
      ))
      ;; add the domina powers' last invoke time
      (for i 1 6 (dsf/add-list-entry (list
        (list 'title        (lambda nil (cat "LastInvokeTime" i ": " (typGetGlobalData &stDomina; (cat "lastInvokeTime" i)))))
        (list 'subtitle     (cat "Last time a lvl " i " power was invoked."))
        (list 'func         (lambda (arg) (typSetGlobalData &stDomina; (cat "lastInvokeTime" i) arg)))
      )))

      (dsf/add-action 'modify '("Modify" 'M) (lambda nil
        (block nil
          (if (eq (dsf/get-pane) 'counter)
            (block (value func)
              (setq value (dsf/get-counter))
              (setq func (dsf/get-list-entry 'func))
              (func value)
              (dsf/notify "Changed value")
              (dsf/set-pane 'default)
              (dsf/show-screen)
            )
            (block nil
              (dsf/set-pane 'counter)
            )
          )
        )
      ))
      (dsf/set-default-action 'modify)

      (dsf/show-screen)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TIMESTOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     9)
    (title      "Time Stop")
    (subtitle   "Stop time or start it again. Great for taking a look around")
    (on-select  (block nil
      (dsf/add-action 'toggle-time
        (lambda nil (block (state)
          (setq state (typGetGlobalData &ovGODTimeStop; 'keep-running))
          (if state
            (list "Start Time" 'S)
            (list "Stop Time" 'S)
          )
        ))
        (lambda nil (block (state)
          (setq state (typGetGlobalData &ovGODTimeStop; 'keep-running))
          (if state
            (block nil
              (typSetGlobalData &ovGODTimeStop; 'keep-running nil)
              (dsf/notify "Started time")
            )
            (block nil
              (typSetGlobalData &ovGODTimeStop; 'keep-running true)
              (dsf/notify "Stopped time")
            )
          )
        ))
      )
      (dsf/set-default-action 'toggle-time)
      (dsf/set-disable-action 'toggle-time '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE SCREEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq god/core-screen (lambda nil (block (modules)
    (dsf/new-screen 'god-core "G.O.D" 'custompicker)
    (dsf/set-no-back true)

    ;; add all the modules
    (enum god/modules m (block nil
      (dsf/add-list-entry m)
    ))

    ;;; sort list by weight
    (dsf/add-list-filter (lambda (entries)
      (fn/sort entries a b (ls (fn/get a 'weight) (fn/get b 'weight)))
    ))

    ;; timestop handlers
    (dsf/on-screen-init (lambda nil
      (if (not (typGetGlobalData &ovGODTimeStop; 'running))
        (typSetGlobalData &ovGODTimeStop; 'running (objAddOverlay gPlayerShip &ovGODTimeStop;))
      )
    ))
    (dsf/on-global-exit (lambda nil (block (oID keep)
      (setq oID (typGetGlobalData &ovGODTimeStop; 'running))
      (setq keep (typGetGlobalData &ovGODTimeStop; 'keep-running))
      (if (and (not keep) oID) (block nil
        (objRemoveOverlay gPlayerShip oID)
        (typSetGlobalData &ovGODTimeStop; 'running nil)
      ))
    )))

    (dsf/filter-screen)
    (dsf/show-screen)
  )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    )
  </Globals>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <StationType UNID="&stGODCoreStation;"
    virtual="true"
    >
    <Events>
      <OnGlobalPaneInit>
        (if (and (eq aScreenUNID &dsShipInterior;) (eq aPane "Default"))
          (scrAddAction gScreen 'godmod 3 "Galactic Omni Device" 'G (god/core-screen))
        )
      </OnGlobalPaneInit>
      <!-- XXX This is a hack until #632 is fixed -->
      <OnGlobalUniverseCreated>
        (block ((items (list)))
          (enum (typFind "i") itm
            (if (not (itmIsKnown (itmCreate itm 1)))
              (lnkAppend items itm)
            )
          )
          (typSetGlobalData &stGODCoreStation; "IdentifiableItems" items)
        )
      </OnGlobalUniverseCreated>
    </Events>
  </StationType>

  <OverlayType UNID="&ovGODTimeStop;">
    <Events>
      <OnUpdate>
        (sysStopTime 30 gPlayerShip)
      </OnUpdate>
    </Events>
  </OverlayType>

  <StationType UNID="&stGODTravelStation;">
    <Events>
      <OnCreate>
        (block nil
          (if (not (typGetGlobalData &stGODTravelStation; "Traveling"))
            (block (current systems)
              (setq current (sysGetNode))
              (setq systems (sysGetNodes))
              ;; filter out system with unid 0xFFFFFF... that is the endgame system
              ;; also filter out current system
              (setq systems (filter systems sys
                (and
                  (not (eq sys current))
                  (not (eq (sysGetSystemType sys) 0xFFFFFF))
                )
              ))
              ;; sort by level
              (setq systems (fn/sort systems a b (ls (sysGetLevel a) (sysGetLevel b))))
              ;; append the current system (so we end in it again)
              (lnkAppend systems current)
              ;; store the system list on the station (globally)
              (typSetGlobalData &stGODTravelStation; "SystemList" systems)

              ;; kill messages for the time being
              (plyRedirectMessage gPlayer true)

              ;; flag that we are traveling
              (typSetGlobalData &stGODTravelStation; "Traveling" true)
            )
          )
          ;; fire the event
          (sysAddObjTimerEvent 5 gSource "Travel")
        )
      </OnCreate>
      <OnGlobalPlayerEnteredSystem>
        (if (typGetGlobalData &stGODTravelStation; "Traveling")
          (sysCreateStation &stGODTravelStation; nil)
        )
      </OnGlobalPlayerEnteredSystem>
      <OnPlayerLeftSystem>
        (objDestroy gSource)
      </OnPlayerLeftSystem>
      <Travel>
        (block (systems)
          (setq systems (typGetGlobalData &stGODTravelStation; "SystemList"))
          (if systems (block (next)
            (setq next (item systems 0))
            ;; remove it from the list
            (lnkRemove systems 0 nil)
            ;; update it on global data
            (if (not systems) (block nil
              (setq systems nil)
              (typSetGlobalData &stGODTravelStation; "Traveling" nil)
              (plyRedirectMessage gPlayer nil)
            ))
            (typSetGlobalData &stGODTravelStation; "SystemList" systems)
            ;; actually travel
            (objGateTo gPlayerShip next (item (sysGetStargates next) 0) nil)
          ))
        )
      </Travel>
    </Events>
  </StationType>

  <Sovereign UNID="&svGODFriendly;"
    name="GOD Friendly"
    alignment="constructive order"
    >
    <RelationsShips>
      <RelationShip sovereign="&svPlayer;" disposition="friendly" mutual="true" />
    </RelationsShips>
  </Sovereign>

  <Sovereign UNID="&svGODNeutral;"
    name="GOD Neutral"
    alignment="neutral"
    >
    <RelationsShips>
      <RelationShip sovereign="&svPlayer;" disposition="neutral" mutual="true" />
    </RelationsShips>
  </Sovereign>

  <Sovereign UNID="&svGODAggresive;"
    name="GOD Aggressive"
    alignment="destructive chaos"
    >
    <RelationsShips>
      <RelationShip sovereign="&svPlayer;" disposition="enemy" mutual="true" />
    </RelationsShips>
  </Sovereign>


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <Globals>
    (block Nil

;;; POSITION SELECTION  {{{

    (setq god/select-position (lambda (code)
      (block nil
        (dsf/new-screen 'position-source "Select Position Source" 'custompicker)
        (dsf/filter-screen)
        (dsf/set-description (lambda (desc)
          (cat desc "\n\nSelect the source from which the position will be calculated")
        ))
        (dsf/add-list-entry (list
          (list 'title      "Player Ship")
          (list 'value      gPlayerShip)
        ))
        (dsf/add-list-entry (list
          (list 'title      "Random")
          (list 'value      'random)
          (list 'subtitle   "Spawn randomly, within your vicinity")
        ))
        (dsf/add-list-entry (list
          (list 'title      "System Center")
          (list 'value      nil)
        ))
        (enum (sysFindObject gPlayerShip "T") obj
          (dsf/add-list-entry (list
            (list 'title    (objGetName obj 0))
            (list 'subtitle (cat
              "Distance: " (objGetDistance gPlayerShip obj) "ls\n"
              "Sovereign: " (typGetDataField (objGetSovereign obj) 'name)
            ))
            (list 'value    obj)
          ))
        )
        (dsf/add-action 'select '("Select" 'S) (lambda nil
          (block (value)
            (setq value (dsf/get-list-entry 'value))
            (if (eq value 'random)
              (code (sysVectorRandom gPlayerShip (random 10 100) 5))

              (block nil
                (dsf/session-set 'position-source (dsf/get-list-entry 'value))
                (dsf/session-set 'distance 10)
                (dsf/session-set 'angle 90)
                ;; define the position params screen
                (dsf/new-screen 'position-params "Set Position Parameters")
                (dsf/set-description (lambda nil
                  (block (distance angle)
                    (setq distance (or (dsf/session-get 'distance) 10))
                    (setq angle (or (dsf/session-get 'angle) 0))
                    (cat "Set the params that determine the position.\n"
                      "An angle of 90 is straight up. 0 is due right.\n"
                      "Distance: " distance " ls\n"
                      "Angle: " angle
                    )
                  )
                ))

                (dsf/add-action 'complete '("Complete" 'C) (lambda nil
                  (block nil
                    (code (sysVectorPolarOffset value (or (dsf/session-delete 'angle) 0) (or (dsf/session-delete 'distance) 10)))
                    (dsf/back)
                  )
                ))
                (dsf/set-default-action 'complete)
                (dsf/set-no-save 'complete)

                (dsf/add-action 'angle '("Set Angle" 'A) (lambda nil
                  (block nil
                    (if (eq (dsf/get-pane) 'counter)
                      (block (value)
                        (setq value (dsf/get-counter 0 360))
                        (dsf/session-set "angle" value)
                        (dsf/set-pane 'default)
                        (dsf/set-default-action 'complete)
                        (dsf/show-screen)
                      )
                      (block nil
                        (dsf/set-pane 'counter)
                        (dsf/set-default-counter 0)
                        (dsf/set-default-action 'angle)
                      )
                    )
                  )
                ))
                (dsf/set-no-save 'angle)

                (dsf/add-action 'distance '("Set Distance" 'D) (lambda nil
                  (block nil
                    (if (eq (dsf/get-pane) 'counter)
                      (block (value)
                        (setq value (dsf/get-counter 0))
                        (dsf/session-set "distance" value)
                        (dsf/set-pane 'default)
                        (dsf/set-default-action 'complete)
                        (dsf/show-screen)
                      )
                      (block nil
                        (dsf/set-pane 'counter)
                        (dsf/set-default-counter 10)
                        (dsf/set-default-action 'distance)
                      )
                    )
                  )
                ))
                (dsf/set-no-save 'distance)

                (dsf/show-screen)
              )
            )
          )
        ))
        (dsf/set-default-action 'select)
        (dsf/set-disable-action 'select '(dsf/list-is-empty))
        (dsf/set-no-save 'select)









        (dsf/show-screen 'position-source)
      )
    ))

;;; END POSITION SELECTION  }}}

;;; ITEM BROWSER  {{{

    (setq god/item-browser (lambda (criteria)
      (block nil

        (dsf/item-browser (map (itmGetTypes criteria) itm (itmCreate itm 1)))

        (god/add-to-cargo-action 'add-to-cargo gPlayerShip)
        (dsf/set-default-action 'add-to-cargo)

        (dsf/add-action 'install '("Install Item" 'I) (lambda nil
          (block (itm result)
            (setq itm (dsf/get-item))
            (if (not (itmIsKnown itm))
              (itmSetKnown itm)
            )
            (setq result (god/install-item itm nil nil))
            (dsf/notify (item result 1))
          )
        ))
        (dsf/set-no-save 'install true)
        (dsf/set-disable-action 'install (lambda nil
          (or (not (dsf/get-item)) (not (itmMatches (dsf/get-item) "d")))
        ))

        (dsf/add-action 'toggle-identify '("Toggle Known" 'T) (lambda nil
          (block (itm)
            (setq itm (dsf/get-item))
            (if itm (block (known)
              (setq known (itmIsKnown itm))
              (setq itm (itmGetType itm))

              (if known
                (block nil
                  (itmSetKnown itm nil)
                  (dsf/notify "Unidentified Item")
                )
                (block nil
                  (itmSetKnown itm true)
                  (dsf/notify "Permanently Identified Item")
                )
              )

              (if (dsf/screen-get 'identify-items) (block (items)
                (setq items (dsf/session-get 'identified-items))
                (if known
                  ;; item was known... remove it from the item list (if present)
                  (block (pos)
                    (if (setq pos (find items itm))
                      (lnkRemove items pos nil)
                    )
                  )
                )
                ;; update the session with the new list
                (dsf/session-set 'identified-items items)
              ))
            ))
          )
        ))
        ;; XXX this can be changed once #632 is updated
        (dsf/set-disable-action 'toggle-identify (lambda nil
          (block ((itm (dsf/get-item)))
            (and (itmIsKnown itm) (not (find (typGetGlobalData &stGODCoreStation; "IdentifiableItems") (itmGetType itm))))
          )
        ))
      )
    ))

;;; END ITEM BROWSER  }}}

;;; REFUEL / RESTORE  {{{

    (setq god/refuel-player (lambda nil
      ;; pump it full of Longzhu's
      (shpRefuelFromItem gPlayerShip (itmCreate &itLongzhuSphere; 2000))
    ))

    (setq god/restore-target (lambda (target)
      (block nil

        (if (objIsShip target) (block nil
          ;; fix states
          (objFixParalysis target)
          (shpFixBlindness target)
          (shpDecontaminate target)

          ;; repair shields
          (shpRechargeShield target 99999999)

          ; repair all items/devices
          (objEnumItems target "*~a D" itm (shpRepairItem target itm))

          ;; refuel
          (if (eq gPlayerShip target) (block nil
            (god/refuel-player)

            ;; fix domina and ranks
            (typSetGlobalData &stDomina; "lastInvokeTime1" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime2" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime3" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime4" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime5" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime6" 0)

            ;; reset black market crime status
            (objSetData gPlayerShip "blackMarketCrime" nil)
            (objSetData gPlayerShip "blackMarketCrimeCost" nil)

            ;; reset commonwealth crime status
            (objSetData gPlayerShip "commonCrime" nil)
            (objSetData gPlayerShip "commonCrimeSeverity" nil)
            (objSetData gPlayerShip "commonCrimeRecord" nil)

            ;; reset ringer crime status
            (objSetData gPlayerShip "ringerCrime" nil)
            (objSetData gPlayerShip "ringerCrimeSeverity" nil)

            ;; fix Korolov standing if required
            (if (eq (typGetGlobalData &stKorolovShipping; "level") -1)
              (typSetGlobalData &stKorolovShipping; "level" 0)
            )

          ))
        ))

        ;; repair armor
        (objEnumItems target "a" armor
          (objRepairArmor target armor)
        )

      )
    ))
;;; END REFUEL / RESTORE  }}}

;;; ADD TO CARGO ACTION  {{{

  ;; TODO perhaps this can be abstracted into a general purpose
  ;;      "set count" screen
  (setq god/add-to-cargo-action (lambda (label target)
    (block nil
      (dsf/add-action label '("Add to Cargo Hold" 'A) (lambda nil
        (block nil
          (if (eq (dsf/get-pane) 'counter)
            (block (cnt itm)
              ;; add item
              (setq cnt (dsf/get-counter))
              (setq itm (itmCreate (itmGetType (dsf/get-item)) cnt))
              (objAddItem target itm)
              (dsf/set-pane 'default)
              (dsf/set-action-handle label '("Add to Cargo Hold" 'A))
              (dsf/notify (cat "Added " cnt " " (itmGetName itm (int (fn/plural cnt 1 3))) " to cargo hold"))
            )
            (block nil
              (dsf/set-pane 'counter)
              (dsf/set-default-counter 1)
              (dsf/set-action-handle label '("Accept Transaction" 'A))
              (dsf/notify (cat "Select the amount of \"" (itmGetName (dsf/get-item) 3) "\" you want to add to the cargo hold"))
            )
          )
        )
      ))
      (dsf/set-no-save label)
      (dsf/set-disable-action label '(dsf/list-is-empty))
    )
  ))

;;; END ADD TO CARGO ACTION  }}}

;;; INSTALL ITEM {{{

    ;; Install an item, using the normal rules, or forcefully.
    ;; We return a tuple with an code and a message
    ;;
    ;; - normal
    ;;   Use the normal rules for installing
    ;; - cargo
    ;;   We have the item in our cargo already
    ;; - target
    ;;   Which ship to install on
    (setq god/install-item (lambda (itm normal inCargo target)
      (block (canInstall result code)
        ;; if we don't have a target, it is the player
        (if (not target) (setq target gPlayerShip))

        (setq canInstall (shpCanInstallDevice target itm))

        (switch
          (and (itmHasAttribute itm "Military") (not (objGetItems gPlayerShip "*+MilitaryID")))
            (setq result '(1 "You must have a military ID to install this item."))
          (eq canInstall 2)
            (setq result '(2 "Your ship cannot support any more devices."))
          (and (itmHasAttribute itm "Illegal") (not (objGetItems gPlayerShip "*+BlackMarketID")))
            (setq result '(3 "You must have a black market ID to install this item."))
          (eq canInstall 4)
            (setq result '(4 "Your ship already has a shield generator installed."))
          (eq canInstall 5)
            (setq result '(5 "Your ship already has a propulsion system installed."))
          (eq canInstall 6)
            (setq result '(6 "Your ship already has a missile launcher installed."))
          (eq canInstall 7)
            (setq result '(7 "Your ship's reactor is not powerful enough for this device."))
          (eq canInstall 8)
            (setq result '(8 "Your ship already has a cargo expansion system installed."))
          (eq canInstall 9)
            (setq result '(9 "Your ship already has a reactor installed."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 10)
            (setq result '(10 "The cargo expansion system is too large to be installed in your ship."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 11)
            (setq result '(11 "The power output of the item is too high for your ship."))
          (eq canInstall 12)
            (setq result '(12 "Your ship cannot support any more weapons."))
          (eq canInstall 13)
            (setq result '(13 "Your ship cannot support any more non-weapon devices."))
          (not (eq canInstall 0))
            (setq result '(14 "This item can not be installed."))
          (setq result '(true))
        )
        ;; if result is True, then we install right away
        (setq code (item result 0))
        (if (or code (find '(4 5 6 8 9) code) (and (not normal) (find '(1 3) code)))
          (block (name)
            (setq name (itmGetName itm 1))
            (switch
              (eq code 4)
                (setq result (list true (cat "Replaced shield generator with " name)))
              (eq code 5)
                (setq result (list true (cat "Replaced propulsion system with " name)))
              (eq code 6)
                (block Nil
                  (shpRemoveDevice target (item (objGetItems target "Il") 0))
                  (setq result (list true (cat "Replaced missile launcher with " name)))
                )
              (eq code 8)
                (setq result (list true (cat "Replaced current cargo expansion with " name)))
              (eq code 9)
                (setq result (list true (cat "Replaced reactor with " name)))
              (setq result (list true (cat "Installed " name)))
            )
            (if (not inCargo) (objAddItem target itm))
            (shpInstallDevice target itm)
          )
        )
        result
      )
    ))

;;; END INSTALL ITEM }}}

    )
  </Globals>

</TranscendenceExtension>
<!--
vim:ts=2:sw=2:sts=2:ft=tscript:
-->
