<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
    <!ENTITY modGODCore                 "0xDCBA0500">

    <!ENTITY itGODCoreHook              "0xDCBA0501">
    <!ENTITY stGODCoreStation           "0xDCBA0502">
    <!ENTITY ovGODTimeStop              "0xDCBA0503">

]>

<TranscendenceExtension
  UNID="&modGODCore;"
  name="G.O.D. Core"
  credits="alterecco"
  version="1.0">

<!--
;   License:
;     Public Domain - alterecco@gmail.com - 2010
-->

  <Globals>
    (block nil

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE VARIABLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;; This is a global variable that holds all the modules.
  ;;; We define it like this, since we allow for other
  ;;; files to append their modules as well.
  ;;; Basically it is data to be used for a custompicker list
  (setq god/modules (if (isError god/modules)
    (list)
    god/modules
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ MODULE - REFUEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Refuel")
    (subtitle     "Refuel your reactor.\nIf it is not fully refueled, contact me!")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (god/refuel-player)
        (dsf/description "Your Reactor has been refueled")
      )))
    ))
  ))

  (setq god/refuel-player (lambda nil
    ;; pump it full of Longzhu's
    (shpRefuelFromItem gPlayerShip (itmCreate &itLongzhuSphere; 2000))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - RESTORE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Restore")
    (subtitle     (cat
      "Restore a target completely.\n"
      "Refuel, fix damage/items, remove negative states, "
      "reset Domina powers and various timers, "
      "fix bad ranks and standings. (some are player only)\n"
      "Credits for this function goes to PM from Transcendence Forums!"
    ))
    (on-select    (block nil
      (dsf/action 'player "Restore Player" 'P
        (lambda nil (block nil
          (god/restore-target gPlayerShip)
          (dsf/description "Restored your ship")
        ))
      )
      (dsf/action 'target "Restore Target" 'T
        (lambda nil (block nil
          (god/restore-target (objGetTarget gPlayerShip))
          (dsf/description "Restored your current target")
        ))
      )
      (dsf/disable-action 'target (not (objGetTarget gPlayerShip)))
    ))
  ))

  (setq god/restore-target (lambda (target)
    (block nil

      (if (objIsShip target) (block nil
        ;; fix states
        (objFixParalysis target)
        (shpFixBlindness target)
        (shpDecontaminate target)

        ;; repair shields
        (shpRechargeShield target 99999999)

        ; repair all items/devices
        (objEnumItems target "*~a D" itm (shpRepairItem target itm))

        ;; refuel
        (if (eq gPlayerShip target) (block nil
          (god/refuel-player)

          ;; fix domina and ranks
          (typSetGlobalData &stDomina; "lastInvokeTime1" 0)
          (typSetGlobalData &stDomina; "lastInvokeTime2" 0)
          (typSetGlobalData &stDomina; "lastInvokeTime3" 0)
          (typSetGlobalData &stDomina; "lastInvokeTime4" 0)
          (typSetGlobalData &stDomina; "lastInvokeTime5" 0)
          (typSetGlobalData &stDomina; "lastInvokeTime6" 0)

        ))
      ))

      ;; repair armor
      (objEnumItems target "a" armor
        (objRepairArmor target armor)
      )

    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BROWSE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Browse Items")
    (subtitle     "Browse and search all items in game. Add some to your cargo hold, or install them directly")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (dsf/screen 'item-browser "Item Browser")
        (god/item-browser "*")
        (dsf/show-screen)
      )))
    ))
  ))

  (setq god/item-browser (lambda (criteria)
    (block nil
      (dsf/item-browser (fn/list-map (itmGetTypes criteria) itm (itmCreate itm 1)))

      (dsf/action 'add-to-cargo "Add to Cargo Hold" 'A (lambda nil
        (block nil
          (if (eq (dsf/pane) "Counter")
            (block (cnt itm inventory)
              ;; add item
              (setq cnt (dsf/counter))
              (setq itm (itmCreate (itmGetUNID (dsf/item)) cnt))
              (objAddItem dsf/player-ship itm)
              (dsf/pane "Default")
              (dsf/action-label 'add-to-cargo "Add to Cargo Hold")
              (dsf/action-key 'add-to-cargo 'A)
              (dsf/description "Your request has been fulfilled")
            )
            (block nil
              (dsf/pane "Counter")
              (dsf/counter 1)
              (dsf/action-label 'add-to-cargo "Accept Transaction")
              (dsf/action-key 'add-to-cargo 'A)
              (dsf/description (cat "Select the amount of \"" (itmGetName (dsf/item) 3) "\" you want to add to your cargo hold"))
            )
          )
        )
      ))
      (dsf/no-save 'add-to-cargo true)
      (dsf/disable-action 'add-to-cargo (lambda nil (not (dsf/item))))

      (dsf/action 'install "Install Item" 'N (lambda nil
        (block (itm result)
          (setq itm (dsf/item))
          (setq result (god/install-item itm nil nil dsf/player-ship))
          (dsf/description (item result 1))
        )
      ))
      (dsf/no-save 'install true)
      (dsf/disable-action 'install (lambda nil
        (or (not (dsf/item)) (not (itmMatches (dsf/item) "d")))
      ))

      (dsf/action 'identify-single "Identify Current Item" 'C (lambda nil
        (block (itm)
          (setq itm (dsf/item))
          (itmSetReference itm)
          (itmSetKnown itm)
          (dsf/description "Identified item")
        )
      ))
      (dsf/no-save 'identify-single true)
      (dsf/disable-action 'identify-single (lambda nil (not (dsf/item))))

      (dsf/action 'identify-all "Identify All Items" 'I (lambda nil
        (block nil
          (objEnumItems gPlayerShip "*U" itm (block nil
            (itmSetReference itm)
            (itmSetKnown itm)
          ))
          (dsf/description "Identified all items")
        )
      ))
      (dsf/no-save 'identify-all true)
      (dsf/disable-action 'identify-all (lambda nil (not (dsf/item))))
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TRAVEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     2)
    (title      "Travel Galaxy")
    (subtitle   "Journey instantly to another system in this galaxy")
    (on-select  (block nil
      (dsf/action 'select "Select" 'S (lambda nil
        (block ((systems (sysGetNodes))
                (current (sysGetNode))
                (data (list)))

          (dsf/screen 'travel-galaxy "Travel Galaxy")
          (dsf/filter-screen)

          ;; TODO: build a much more advanced system list (in correct order)
          ;; sort by level
          (setq systems (fn/list-sort systems a b (ls (sysGetLevel a) (sysGetLevel b))))
          ;; filter out endgame (or any others systems with no gates)
          (setq systems (filter systems s (gr (count (sysGetStargates s)) 0)))

          ;; build a custompicker list
          (enum systems s (if (not (eq s current))
            (lnkAppend data (list
              (list 'title (sysGetName s))
              (list 'node s)
            ))
          ))
          (dsf/list-data data)

          (dsf/action 'gate "Select" 'S (lambda nil (block (node gate)
            (setq node (dsf/list-entry 'node))
            (setq gate (item (sysGetStargates node) 0))
            (objGateTo gPlayerShip node gate &efStargateOut;)
            (plyMessage gPlayer (cat "Gating to " (sysGetName node)))
            (dsf/exit)
          )))
          (dsf/disable-action 'gate (lambda nil (not (dsf/list-entry))))

          (dsf/show-screen)
        )
      ))
    ))
  ))
  (lnkAppend god/modules '(
    (weight     1)
    (title      "Travel Current System")
    (subtitle   "Journey instantly to another place in this system")
    (on-select  (block nil
      (dsf/action 'select "Select" 'S (lambda nil
        (block nil

          (dsf/screen 'travel-system "Travel System")
          (dsf/data-set 'default-filter-term "TAMF")
          (dsf/object-browser)

          (dsf/action 'jump "Select" 'S (lambda nil
            (block (o)
              (setq o (dsf/list-entry 'obj))
              (objJumpTo gPlayerShip (sysVectorRandom (objGetPos o) 8 4 "*"))
              (plyMessage gPlayer (cat "Jumped to " (objGetName o)))
              (dsf/exit)
            )
          ))
          (dsf/disable-action 'jump (lambda nil (not (dsf/list-entry))))

          (dsf/show-screen)
        )
      ))
    ))
  ))

;  ;; system list edge cases:
;  ;;  - destination system has no gates
;  ;;  - current system has only one gate and it leads somewhere
;  ;;    we have already been
;  ;;  - all systems have been accounted for
;  (setq god/gate-list (lambda (systems current gate)
;    (block (all dest)
;      (setq all (sysGetNodes))
;      (setq dest (sysGetStargateDestinationNode current gate))
; 
;      (switch
;        (eq all systems)
;          nil
;        (eq (count (sysGetStargates dest)) 0)
;          nil
;      )
;    )
;  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - INSTALL DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Install Device")
    (subtitle     "Install any device you have in your cargo hold. You can choose between installing it in the regular way, or forcefully")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil
        (god/install-device))
      )
    ))
  ))

  (setq god/install-device (lambda nil
    (block nil
      (dsf/screen 'install-device "Install Device" 'itempicker-player)
      (dsf/item-filter "dUN")

      (dsf/action 'force "Force Install" 'F (lambda nil (block (result)
        (setq result (god/install-item (dsf/item) nil true))
        (dsf/description (item result 1))
      )))
      (dsf/no-save 'force true)
      (dsf/disable-action 'force (lambda nil (not (dsf/item))))

      (dsf/action 'normal "Normal Install" 'N (lambda nil (block (result)
        (setq result (god/install-item (dsf/item) true true))
        (dsf/description (item result 1))
      )))
      (dsf/no-save 'normal true)
      (dsf/disable-action 'normal (lambda nil (not (dsf/item))))

      (dsf/action 'add "Add More Devices" 'A (lambda nil (block nil
        (dsf/screen 'device-browser "Device Browser")
        (god/item-browser "d")
        (dsf/show-screen)
      )))
      (dsf/show-screen)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REMOVE DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Remove Device")
    (subtitle     "Remove any device you have installed on your ship")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRemoveDevice;")
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR / REPLACE ARMOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Repair or Replace Armor")
    (subtitle     "Fix up your armor, or replace segments")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gTechLevel 15)
        (setq gArmorSegment 0)
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRepairArmor;")
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       0)
    (title        "Repair Item")
    (subtitle     "Fix any item that needs fixing")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (dsf/screen 'repair-item "Repair Item" 'itempicker-player)
        (dsf/item-filter "*d~mUD")
        (dsf/action 'repair "Repair" 'R (lambda nil
          (block (itm)
            (shpRepairItem gPlayerShip (dsf/item))
            (dsf/description "Repaired Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/no-save 'repair true)
        (dsf/disable-action 'repair (lambda nil (not (dsf/item))))
        (dsf/show-screen)
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - DAMAGE ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       0)
    (title        "Damage Item")
    (subtitle     "Damage an item... just because")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (dsf/screen 'repair-item "Repair Item" 'itempicker-player)
        (dsf/item-filter "*d~mUN")
        (dsf/action 'repair "Damage" 'D (lambda nil
          (block (itm)
            (shpDamageItem gPlayerShip (dsf/item))
            (dsf/description "Damaged Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/no-save 'repair true)
        (dsf/disable-action 'repair (lambda nil (not (dsf/item))))
        (dsf/show-screen)
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - MAP SYSTEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Map System")
    (subtitle     "Reveal location on map of every station in the current system")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (enum (sysFindObject gSource "Ts") obj
            (objSetKnown obj)
        )
        (dsf/description "Mapped system")
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - LOOT ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Loot All")
    (subtitle     "Loot all items in wrecks within a certain radius in ls\n(Note: this does not respect your cargo limit)")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (if (eq (dsf/pane) 'Counter)
          (block (radius criteria wrecks (cnt 0))
            (setq radius (fn/constrain (dsf/counter) 0 1000))
            (setq criteria (cat "sTN:" radius))
            (setq wrecks (filter (sysFindObject gPlayerShip criteria) obj
              (or (objHasAttribute obj "shipwreck") (eq (objGetVisibleDamage obj) 100) (strFind (objGetName obj) "wreck"))
            ))
            (enum wrecks obj (objEnumItems obj "*U" itm (block nil
              (setq cnt (add cnt 1))
              (objRemoveItem obj itm)
              (objAddItem gPlayerShip itm)
            )))
            (enum wrecks obj (if (objIsShip obj) (objDestroy obj)))
            (dsf/pane 'Default)
            (dsf/description (cat "Looted " (fn/plural cnt "item" "items" true)))
          )
          (block nil
            (dsf/pane 'Counter)
            (dsf/description "Enter the ls you want to set as radius. Upper limit is 1000")
          )
        )
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - JETTISON ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Jettison All")
    (subtitle     "Jettison all items in your hold")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block (items)
        (if (setq items (objGetItems gPlayerShip "*U"))
          (block (dest)
            (setq dest (sysCreateStation &stCargoCrate; (sysVectorPolarOffset gPlayerShip 0 2)))
            (enum items itm (block nil
              (objRemoveItem gPlayerShip itm)
              (objAddItem dest itm)
            ))
            (dsf/description "Jettisoned all items")
          )
          (dsf/description "You have no items onboard to jettison")
        )
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING DEPOSIT CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Deposit Credits")
    (subtitle     "Add credits to your account")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block nil
        (if (eq (dsf/pane) 'Counter)
          (block (credits)
            (plyCredit gPlayer (setq credits (fn/constrain (dsf/counter) 0 10000000)))
            (dsf/pane 'Default)
            (dsf/description (cat "Added " credits " credits to your account"))
          )
          (block nil
            (dsf/pane 'Counter)
            (dsf/description "Select the amount of credits you want (max 10000000)")
          )
        )
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING WITHDRAW CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Withdraw Credits")
    (subtitle     "Remove credits to your account")
    (on-select    (block nil
      (dsf/action 'select "Select" 'S (lambda nil (block (mx)
        (setq mx (plyGetCredits gPlayer))
        (if (eq (dsf/pane) 'Counter)
          (block (credits)
            (plyCharge gPlayer (setq credits (fn/constrain (dsf/counter) 0 mx)))
            (dsf/pane 'Default)
            (dsf/description (cat "Withdrew " credits " credits from your account"))
          )
          (block nil
            (dsf/pane 'Counter)
            (dsf/description (cat "Select the amount of credits you want to remove (max " mx ")"))
          )
        )
      )))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TIMESTOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     9)
    (title      "Time Stop")
    (subtitle   "Stop time and start it again. Great for taking a look around")
    (on-select  (block (state)
      (setq state (objGetData gPlayerShip 'god/keeptimestop))
      (dsf/action 'toggle-time
        (if state "Start Time" "Stop Time") 'S
        (lambda nil (if state
          (block nil
            (objSetData gPlayerShip 'god/keeptimestop nil)
            (dsf/description "Started time")
          )
          (block nil
            (objSetData gPlayerShip 'god/keeptimestop true)
            (dsf/description "Stopped time")
          )
        ))
      )
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE SCREEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq god/core-screen (lambda nil (block (modules)
    (dsf/screen 'god-core "G.O.D" 'custompicker)
    (dsf/filter-screen)
    (dsf/no-back true)

    ;; sort list by weight
    (setq modules (fn/list-sort god/modules a b (ls (fn/hash-get a 'weight) (fn/hash-get b 'weight))))
    (dsf/list-data modules)

    ;; timestop handlers
    (dsf/on-init (lambda nil
      (if (not (objGetData gPlayerShip 'god/timeoverlay))
        (objSetData gPlayerShip 'god/timeoverlay (objAddOverlay gPlayerShip &ovGODTimeStop;))
      )
    ))
    (dsf/on-global-exit (lambda nil (block (oID keepStopped)
      (setq oID (objGetData gPlayerShip 'god/timeoverlay))
      (setq keepStopped (objGetData gPlayerShip 'god/keeptimestop))
      (if (and (not keepStopped) oID) (block nil
        (objRemoveOverlay gPlayerShip oID)
        (objSetData gPlayerShip 'god/timeoverlay nil)
      ))
    )))

    (dsf/show-screen)
  )))


;    (setq god/core-screen (lambda nil (block nil
;
;      (dsf/screen 'god-core "G.O.D")
;      (dsf/filter-screen)
;      (dsf/list-data (god/format-modules))
;
;      (dsf/action 'select "Select" 'S (lambda nil
;        (dsf/eval (dsf/list-entry 'action))
;      ))
;      (dsf/save-action 'select true)
;
;      ;; timestop handlers
;      (dsf/on-init (lambda nil
;        (if (not (objGetData gPlayerShip 'god/timeoverlay))
;          (objSetData gPlayerShip 'god/timeoverlay (objAddOverlay gPlayerShip &ovGODTimeStop;))
;        )
;      ))
;      (dsf/on-global-exit (lambda nil (block (oID keepStopped)
;        (setq oID (objGetData gPlayerShip 'god/timeoverlay))
;        (setq keepStopped (objGetData gPlayerShip 'god/keeptimestop))
;        (if (and (not keepStopped) oID) (block nil
;          (objRemoveOverlay gPlayerShip oID)
;          (objSetData gPlayerShip 'god/timeoverlay nil)
;        ))
;      )))
;
;      (dsf/exit-action)
;      (dsf/show-screen)
;    )))
;
;    ;; gather all the G.O.D modules into one custompicker list
;    (setq god/format-modules (lambda nil (block (modules (list))
;      (if (not (setq modules god/formatted-modules)) (block nil
;        ;; sort list once by weight, then by title
;        (setq modules (dsf/list-sort god/modules a b (ls (dsf/hash-get a 'weight) (dsf/hash-get b 'weight))))
;        ;(setq modules (dsf/list-sort modules a b (ls (dsf/hash-get a 'title) (dsf/hash-get b 'title))))
;        (setq god/formatted-modules modules)
;      ))
;      modules
;    )))
;
;    ;;; This global variable is used to store the formatted list of modules
;    ;;; so that we don't have to recreate it on every run.
;    ;;; This allows us to make the building of the list more expensive
;    ;;; We don't save this on the ship so we can catch changes to the
;    ;;; modules made between sessions
;    (setq god/formatted-modules nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    )
  </Globals>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <ItemType UNID="&itGODCoreHook;"
    name=           "G.O.D."
    virtual=        "true"
    usekey=         "G"
    >
    <Image imageID="&rsItems1;" imageX="0" imageY="192" imageWidth="96" imageHeight="96"/>
    <Invoke>
      (god/core-screen)
    </Invoke>
  </ItemType>

  <StationType UNID="&stGODCoreStation;"
    virtual="true"
    >
    <Events>
      <OnGlobalPlayerEnteredSystem>
        (block Nil
          (if (not (objHasItem gPlayerShip (itmCreate &itGODCoreHook; 1)))
            (objAddItem gPlayerShip (itmCreate &itGODCoreHook; 1))
          )
        )
      </OnGlobalPlayerEnteredSystem>
    </Events>
  </StationType>

  <OverlayType UNID="&ovGODTimeStop;">
    <Events>
      <OnUpdate>
        (sysStopTime 30 gPlayerShip)
      </OnUpdate>
    </Events>
  </OverlayType>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <Globals>
    (block Nil

    ;; Install an item, using the normal rules, or forcefully.
    ;; We return a tuple with an code and a message
    ;;
    ;; - normal
    ;;   Use the normal rules for installing
    ;; - cargo
    ;;   We have the item in our cargo already
    ;; - target
    ;;   Which ship to install on
    (setq god/install-item (lambda (itm normal inCargo target)
      (block (canInstall result code)
        ;; if we don't have a target, it is the player
        (if (not target) (setq target gPlayerShip))

        (setq canInstall (shpCanInstallDevice target itm))

        (switch
          (and (itmHasModifier itm "Military") (not (objGetItems gPlayerShip "*+MilitaryID")))
            (setq result '(1 "You must have a military ID to install this item."))
          (eq canInstall 2)
            (setq result '(2 "Your ship cannot support any more devices."))
          (and (itmHasModifier itm "Illegal") (not (objGetItems gPlayerShip "*+BlackMarketID")))
            (setq result '(3 "You must have a black market ID to install this item."))
          (eq canInstall 4)
            (setq result '(4 "Your ship already has a shield generator installed."))
          (eq canInstall 5)
            (setq result '(5 "Your ship already has a propulsion system installed."))
          (eq canInstall 6)
            (setq result '(6 "Your ship already has a missile launcher installed."))
          (eq canInstall 7)
            (setq result '(7 "Your ship's reactor is not powerful enough for this device."))
          (eq canInstall 8)
            (setq result '(8 "Your ship already has a cargo expansion system installed."))
          (eq canInstall 9)
            (setq result '(9 "Your ship already has a reactor installed."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 10)
            (setq result '(10 "The cargo expansion system is too large to be installed in your ship."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 11)
            (setq result '(11 "The power output of the item is too high for your ship."))
          (eq canInstall 12)
            (setq result '(12 "Your ship cannot support any more weapons."))
          (eq canInstall 13)
            (setq result '(13 "Your ship cannot support any more non-weapon devices."))
          (not (eq canInstall 0))
            (setq result '(14 "This item can not be installed."))
          (setq result '(true))
        )
        ;; if result is True, then we install right away
        (setq code (item result 0))
        (if (or code (find '(4 5 6 8 9) code) (and (not normal) (find '(1 3) code)))
          (block (name)
            (setq name (itmGetName itm 1))
            (switch
              (eq code 4)
                (setq result (list true (cat "Replaced shield generator with " name)))
              (eq code 5)
                (setq result (list true (cat "Replaced propulsion system with " name)))
              (eq code 6)
                (block Nil
                  (shpRemoveDevice target (item (objGetItems target "Il") 0))
                  (setq result (list true (cat "Replaced missile launcher with " name)))
                )
              (eq code 8)
                (setq result (list true (cat "Replaced current cargo expansion with " name)))
              (eq code 9)
                (setq result (list true (cat "Replaced reactor with " name)))
              (setq result (list true (cat "Installed " name)))
            )
            (if (not inCargo) (objAddItem target itm))
            (shpInstallDevice target itm)
          )
        )
        result
      )
    ))

    )
  </Globals>
</TranscendenceExtension>
<!--
vim:ts=2:sw=2:sts=2:ft=tscript:
-->
