<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
    <!ENTITY modGODCore                 "0xDCBA0500">

    <!ENTITY itGODCoreHook              "0xDCBA0501">
    <!ENTITY stGODCoreStation           "0xDCBA0502">
    <!ENTITY ovGODTimeStop              "0xDCBA0503">

]>

<TranscendenceExtension
  UNID="&modGODCore;"
  name="G.O.D. Core"
  credits="alterecco"
  version="1.0">

<!--
  License:
    Public Domain - alterecco@gmail.com

  Bugs:
    Wolfy 12/1/2011
      On Replace Armor screen:
        "No binding for symbol gCheckMilitaryID ###(and gCheckMilitaryID (itmHasModifier..."
      Spawn Objects
        - Add more info in subtitle?

-->

  <Globals>
    (block nil

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE VARIABLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;; This is a global variable that holds all the modules.
  ;;; We define it like this, since we allow for other
  ;;; files to append their modules as well.
  ;;; Basically it is data to be used for a custompicker list
  (setq god/modules (if (isError god/modules)
    (list)
    god/modules
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ MODULE - REFUEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Refuel")
    (subtitle     "Refuel your reactor.\nIf it is not fully refueled, contact me!")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (god/refuel-player)
        (dsf/notify "Your Reactor has been refueled")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - RESTORE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       1)
    (title        "Restore Player")
    (subtitle     (cat
      "Restore a target completely.\n"
      "Refuel, fix damage/items, remove negative states, "
      "reset Domina powers and various timers, "
      "fix bad ranks and standings. (some are player only)\n"
      "Credits for this function goes to PM from Transcendence Forums!"
    ))
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (god/restore-target gPlayerShip)
        (dsf/notify "Restored your ship")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - SPAWN SHIPS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Spawn Ships")
    (subtitle     "Browse and spawn any ship in game. Make them your friends, enemies or wingmen")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/spawn-ships)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (setq dsf/spawn-ships (lambda nil
    (block (spawn)

      (dsf/new-screen 'ship-select "Select Ship" 'custompicker)
      (dsf/filter-screen)

      ;; add ships to the list
      (enum (typFind "s") unid
        (dsf/add-list-entry (list
          (list 'title      (typGetDataField unid 'name))
          (list 'subtitle   (cat "Level: " (typGetDataField unid 'level)))
          (list 'unid       unid)
          (list 'level      (typGetDataField unid 'level))
        ))
      )
      (dsf/add-list-filter (lambda (entries)
        (fn/sort entries a b (gr (fn/get a 'level) (fn/get b 'level)))
      ))
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil
          (dsf/session-set 'unid (dsf/get-list-entry 'unid))
          (dsf/show-screen 'spawn-count)
        )
      ))
      (dsf/set-default-action 'select)
      ;; disable the action if the list is empty
      (dsf/set-disable-action 'select '(dsf/list-is-empty))

      (dsf/new-screen 'spawn-count "Set Spawn Amount")
      (dsf/set-pane 'counter)
      (dsf/on-pane-init (lambda nil (dsf/set-counter 1)))
      (dsf/set-description (lambda (desc) (block (unid)
        (setq unid (dsf/session-get 'unid))
        (cat "Select how many of the type \"" (typGetDataField unid 'name) "\" you want to spawn")
      )))
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil
          (dsf/session-set 'count (dsf/get-counter 1))
          (dsf/show-screen 'spawn-behaviour)
        )
      ))
      (dsf/set-default-action 'select)

      (dsf/new-screen 'spawn-behaviour "Set Spawn Behaviour" 'custompicker)
      (dsf/add-list-entries (list
        '((title      "Wingman")
          (subtitle   "Add as wingman")
          (orders     'wingman)
        )
        '((title      "Enemy")
          (subtitle   "Add as enemy, attacking you")
          (orders     'enemy)
        )
        '((title      "Aggressive Wander")
          (subtitle   "Add as DestructiveChaos, attacking nearest enemies")
          (orders     'agressive)
        )
        '((title      "Escort")
          (subtitle   "Add as your escort")
          (orders     'escort)
        )
        '((title      "Patrol")
          (subtitle   "Patrol around a random friendly target targets")
          (orders     'patrol)
        )
        '((title      "Passive")
          (subtitle   "Add as passive (holding)")
          (orders     'passive)
        )
      ))
      (setq spawn (lambda nil
        (block (unid amount orders)
          (setq unid (dsf/session-delete 'unid))
          (setq amount (dsf/session-delete 'count))
          (setq orders (dsf/get-list-entry 'orders))

          (for i 1 amount (block (obj)
            ;; we create all short of the players pos
            (setq obj (sysCreateShip unid (sysVectorPolarOffset gPlayerShip (random 0 359) (random 5 15)) &svIndependent;))
            (switch
              (eq orders 'wingman)
                (block nil
                  (objSetSovereign obj &svIndependent;)
                  (objSetEventHandler obj &baStdWingmanBase;)
                  (objFireEvent obj "OrderJoinPlayer")
                )
              (eq orders 'enemy)
                (block nil
                  (objSetSovereign obj &svPirates;)
                  (shpOrder obj 'attack gPlayerShip)
                )
              (eq orders 'aggressive)
                (block nil
                  (objSetSovereign obj &svDestructiveChaos;)
                  (shpSetCommandCode obj (block nil (shpOrder gSource 'attackNearestEnemy)))
                )
              (eq orders 'escort)
                (shpOrder obj 'escort gPlayerShip)
              (eq orders 'patrol)
                (shpOrder obj 'patrol (random (sysFindObject gPlayerShip "tF")) (random 10 40))
              (eq orders 'passive)
                  (shpOrder obj 'hold)
            )
          ))
        )
      ))
      (dsf/add-action 'spawn '("Spawn And Exit" 'S) (lambda nil (block nil
        (spawn)
        (dsf/exit 'force)
      )))
      (dsf/set-default-action 'spawn)
      (dsf/add-action 'spawn-more '("Spawn and Add More" 'A) (lambda nil (block nil
        (spawn)
        (dsf/show-screen 'spawn-select)
      )))

      (dsf/show-screen 'ship-select)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - SPAWN STATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Spawn Stations")
    (subtitle     "Browse and spawn any station in the game")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'spawn-station "Spawn Station" 'custompicker)
        (dsf/filter-screen)

        (dsf/set-description "\n\nSpawn a single station ten ls due north from you")

        ;; add stations to the list
        (enum (typFind "t -star; -asteroid; -shipwreck; -planet;") unid
          (dsf/add-list-entry (list
            (list 'title      (typGetDataField unid 'name))
            (list 'subtitle   (cat "Level: " (typGetDataField unid 'level)))
            (list 'unid       unid)
            (list 'level      (typGetDataField unid 'level))
          ))
        )
        (dsf/add-list-filter (lambda (entries)
          (fn/sort entries a b (gr (fn/get a 'level) (fn/get b 'level)))
        ))

        (dsf/add-action 'friendly '("As Commonwealth" 'C) (lambda nil
          (block (unid obj)
            (setq unid (dsf/get-list-entry 'unid))
            (setq obj (sysCreateStation unid (sysVectorPolarOffset gPlayerShip 90 10)))
            (objSetSovereign obj &svCommonwealth;)
            (dsf/notify "Spawned Friendly Station")
          )
        ))
        (dsf/set-default-action 'friendly)
        (dsf/set-disable-action 'friendly '(dsf/list-is-empty))
        (dsf/add-action 'enemy '("As DestructiveChaos" 'D) (lambda nil
          (block (unid obj)
            (setq unid (dsf/get-list-entry 'unid))
            (setq obj (sysCreateStation unid (sysVectorPolarOffset gPlayerShip 90 10)))
            (objSetSovereign obj &svDestructiveChaos;)
            (dsf/notify "Spawned Enemy Station")
          )
        ))
        (dsf/set-disable-action 'enemy '(dsf/list-is-empty))
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BROWSE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       3)
    (title        "Browse Items")
    (subtitle     "Browse and search all items in game. Add some to your cargo hold, or install them directly")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'item-browser "Item Browser")
        (god/item-browser "*")
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TRAVEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     2)
    (title      "Travel Galaxy")
    (subtitle   "Journey instantly to another system in this galaxy")
    (on-select  (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block ((systems (sysGetNodes))
                (current (sysGetNode)))

          (dsf/new-screen 'travel-galaxy "Travel Galaxy")
          (dsf/filter-screen)

          ;; TODO build a much more advanced system list (in correct order)

          ;; sort by level
          (setq systems (fn/sort systems a b (ls (sysGetLevel a) (sysGetLevel b))))
          ;; filter out endgame (or any others systems with no gates)
          (setq systems (filter systems s (gr (count (sysGetStargates s)) 0)))

          ;; add list-entries
          (enum systems s (if (not (eq s current))
            (dsf/add-list-entry (list
              (list 'title (sysGetName s))
              (list 'node s)
            ))
          ))

          (dsf/add-action 'gate '("Select" 'S) (lambda nil (block (node gate)
            (setq node (dsf/get-list-entry 'node))
            (setq gate (item (sysGetStargates node) 0))
            (dsf/on-global-exit (lambda nil (block nil
              (objGateTo gPlayerShip node gate &efStargateOut;)
              (plyMessage gPlayer (cat "Gating to " (sysGetName node)))
            )))
            (dsf/exit 'force)
          )))
          (dsf/set-default-action 'gate)
          (dsf/set-disable-action 'gate '(dsf/list-is-empty))

          (dsf/show-screen)
        )
      ))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (lnkAppend god/modules '(
    (weight     1)
    (title      "Travel Current System")
    (subtitle   "Journey instantly to another place in this system")
    (on-select  (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (block nil

          (dsf/new-screen 'travel-system "Travel System")
          (dsf/screen-set 'default-filter-term "TAMF")
          (dsf/object-browser)

          (dsf/add-action 'jump '("Select" 'S) (lambda nil
            (block (o)
              (setq o (dsf/get-list-entry 'obj))
              (objJumpTo gPlayerShip (sysVectorRandom (objGetPos o) 8 4 "*"))
              (plyMessage gPlayer (cat "Jumped to " (objGetName o)))
              (dsf/exit 'force)
            )
          ))
          (dsf/set-default-action 'jump)
          (dsf/set-disable-action 'jump '(dsf/list-is-empty))

          (dsf/show-screen)
        )
      ))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;  ;; system list edge cases:
;  ;;  - destination system has no gates
;  ;;  - current system has only one gate and it leads somewhere
;  ;;    we have already been
;  ;;  - all systems have been accounted for
;  (setq god/gate-list (lambda (systems current gate)
;    (block (all dest)
;      (setq all (sysGetNodes))
;      (setq dest (sysGetStargateDestinationNode current gate))
; 
;      (switch
;        (eq all systems)
;          nil
;        (eq (count (sysGetStargates dest)) 0)
;          nil
;      )
;    )
;  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - INSTALL DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Install Device")
    (subtitle     "Install any device you have in your cargo hold. You can choose between installing it in the regular way, or forcefully")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil
        (god/install-device))
      )
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

  (setq god/install-device (lambda nil
    (block nil
      (dsf/new-screen 'install-device "Install Device" 'itempicker)
      (dsf/set-item-filter "dUN")

      (dsf/add-action 'force '("Force Install" 'F) (lambda nil (block (result)
        (setq result (god/install-item (dsf/get-item) nil true))
        (dsf/notify (item result 1))
      )))
      (dsf/set-default-action 'select)
      (dsf/set-no-save 'force true)
      (dsf/set-disable-action 'force '(dsf/list-is-empty))

      (dsf/add-action 'normal '("Normal Install" 'N) (lambda nil (block (result)
        (setq result (god/install-item (dsf/get-item) true true))
        (dsf/notify (item result 1))
      )))
      (dsf/set-no-save 'normal true)
      (dsf/set-disable-action 'normal '(dsf/list-is-empty))

      (dsf/add-action 'add '("Add More Devices" 'A) (lambda nil (block nil
        (dsf/new-screen 'device-browser "Device Browser")
        (god/item-browser "d")
        (dsf/show-screen)
      )))
      (dsf/show-screen)
    )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REMOVE DEVICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Remove Device")
    (subtitle     "Remove any device you have installed on your ship")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRemoveDevice;")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR / REPLACE ARMOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Repair or Replace Armor")
    (subtitle     "Fix up your armor, or replace segments")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (setq gPrevScreen (-dsf/get-screen-unid))
        (setq gPrevPane "Default")
        (setq gTechLevel 15)
        (setq gArmorSegment 0)
        (setq gMargin 0)
        (scrShowScreen gScreen "&dsRepairArmor;")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - REPAIR ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Repair Item")
    (subtitle     "Fix any item that needs fixing")
    (hide         (block ((do-hide true))
      (objEnumItems gPlayerShip itm
        (if (itmIsDamaged itm) (setq do-hide nil))
      )
      do-hide
    ))
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'repair-item "Repair Item" 'itempicker)
        (dsf/set-item-filter "*d~mUD")
        (dsf/add-action 'repair '("Repair" 'R) (lambda nil
          (block (itm)
            (shpRepairItem gPlayerShip (dsf/get-item))
            (dsf/notify "Repaired Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/set-no-save 'repair true)
        (dsf/set-disable-action 'repair '(dsf/list-is-empty))
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - DAMAGE ITEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Damage Item")
    (subtitle     "Damage an item... just because")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (dsf/new-screen 'repair-item "Repair Item" 'itempicker)
        (dsf/set-item-filter "*d~mUN")
        (dsf/add-action 'damage '("Damage" 'D) (lambda nil
          (block (itm)
            (shpDamageItem gPlayerShip (dsf/get-item))
            (dsf/notify "Damaged Item")
            ;(dsf/show-screen)
          )
        ))
        (dsf/set-no-save 'damage true)
        (dsf/set-disable-action 'damage '(dsf/list-is-empty))
        (dsf/show-screen)
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - MAP SYSTEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       5)
    (title        "Map System")
    (subtitle     "Reveal location on map of every station in the current system")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (enum (sysFindObject gSource "Ts") obj
            (objSetKnown obj)
        )
        (dsf/notify "Mapped system")
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - LOOT ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Loot All")
    (subtitle     "Loot all items in wrecks within a certain radius in ls\n(Note: this does not respect your cargo limit)")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (if (eq (dsf/get-pane) 'counter)
          (block (radius criteria wrecks (cnt 0))
            (setq radius (dsf/get-counter 0 1000))
            (setq criteria (cat "sTN:" radius))
            (setq wrecks (filter (sysFindObject gPlayerShip criteria) obj
              (or (objHasAttribute obj "shipwreck") (eq (objGetVisibleDamage obj) 100) (strFind (objGetName obj) "wreck"))
            ))
            (enum wrecks obj (block nil
              (objEnumItems obj "*U" itm (block nil
                (setq cnt (add cnt 1))
                (objRemoveItem obj itm)
                (objAddItem gPlayerShip itm)
              ))
              (if (objIsShip obj) (objDestroy obj))
            ))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Looted " (fn/plural cnt "item" "items" true)))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify "Enter the ls you want to set as radius. Upper limit is 1000")
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - JETTISON ALL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Jettison All")
    (subtitle     "Jettison all items in your hold")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (items)
        (if (setq items (objGetItems gPlayerShip "*U"))
          (block (dest)
            (setq dest (sysCreateStation &stCargoCrate; (sysVectorPolarOffset gPlayerShip 0 2)))
            (enum items itm (block nil
              (objRemoveItem gPlayerShip itm)
              (objAddItem dest itm)
            ))
            (dsf/notify "Jettisoned all items")
          )
          (dsf/notify "You have no items onboard to jettison")
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING DEPOSIT CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Deposit Credits")
    (subtitle     "Add credits to your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block nil
        (if (eq (dsf/get-pane) 'counter)
          (block (credits)
            (plyCredit gPlayer (setq credits (dsf/get-counter 0 10000000)))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Added " credits " credits to your account"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify "Select the amount of credits you want (max 10000000)")
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING WITHDRAW CREDITS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Withdraw Credits")
    (subtitle     "Remove credits from your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (mx)
        (setq mx (plyGetCredits gPlayer))
        (if (eq (dsf/get-pane) 'counter)
          (block (credits)
            (plyCharge gPlayer (setq credits (dsf/get-counter 0 mx)))
            (dsf/set-pane 'default)
            (dsf/notify (cat "Withdrew " credits " credits from your account"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "Select the amount of credits you want to remove (max " mx ")"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING DEPOSIT RINS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Deposit Rins")
    (subtitle     "Add rins to your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (rins)
        (setq rins (or (objGetData gPlayerShip 'rins) 0))
        (if (eq (dsf/get-pane) 'counter)
          (block (credit)
            (setq rins (add rins (setq credit (dsf/get-counter 0 10000000))))
            (objSetData gPlayerShip 'rins rins)
            (dsf/set-pane 'default)
            (dsf/notify (cat "Added " credit " rins to your account. You now have " rins " rins"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "You have " rins " rins. How many do you want to add (max 10000000)"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - BANKING WITHDRAW RINS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight       6)
    (title        "Banking - Withdraw Rins")
    (subtitle     "Remove rins from your account")
    (on-select    (block nil
      (dsf/add-action 'select '("Select" 'S) (lambda nil (block (rins)
        (setq rins (objGetData gPlayerShip 'rins))
        (if (eq (dsf/get-pane) 'counter)
          (block (credit)
            (setq rins (subtract rins (setq credit (dsf/get-counter 0 rins))))
            (objSetData gPlayerShip 'rins rins)
            (dsf/set-pane 'default)
            (dsf/notify (cat "Withdraw " credit " rins from your account. You now have " rins " rins"))
          )
          (block nil
            (dsf/set-pane 'counter)
            (dsf/notify (cat "Select the amount of rins you want to remove (max " rins ")"))
          )
        )
      )))
      (dsf/set-default-action 'select)
      (dsf/set-disable-action 'select '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;; {{{ MODULE - TIMESTOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (lnkAppend god/modules '(
    (weight     9)
    (title      "Time Stop")
    (subtitle   "Stop time and start it again. Great for taking a look around")
    (on-select  (block nil
      (dsf/add-action 'toggle-time
        (lambda nil (block (state)
          (setq state (typGetGlobalData &ovGODTimeStop; 'keep-running))
          (if state
            (list "Start Time" 'S)
            (list "Stop Time" 'S)
          )
        ))
        (lambda nil (block (state)
          (setq state (typGetGlobalData &ovGODTimeStop; 'keep-running))
          (if state
            (block nil
              (typSetGlobalData &ovGODTimeStop; 'keep-running nil)
              (dsf/notify "Started time")
            )
            (block nil
              (typSetGlobalData &ovGODTimeStop; 'keep-running true)
              (dsf/notify "Stopped time")
            )
          )
        ))
      )
      (dsf/set-default-action 'toggle-time)
      (dsf/set-disable-action 'toggle-time '(dsf/list-is-empty))
    ))
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE SCREEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq god/core-screen (lambda nil (block (modules)
    (dsf/new-screen 'god-core "G.O.D" 'custompicker)
    (dsf/set-no-back true)

    ;; add all the modules
    (enum god/modules m (block nil
      (dsf/add-list-entry m)
    ))

    ;;; sort list by weight
    (dsf/add-list-filter (lambda (entries)
      (fn/sort entries a b (ls (fn/get a 'weight) (fn/get b 'weight)))
    ))

    ;; timestop handlers
    (dsf/on-screen-init (lambda nil
      (if (not (typGetGlobalData &ovGODTimeStop; 'running))
        (typSetGlobalData &ovGODTimeStop; 'running (objAddOverlay gPlayerShip &ovGODTimeStop;))
      )
    ))
    (dsf/on-global-exit (lambda nil (block (oID keep)
      (setq oID (typGetGlobalData &ovGODTimeStop; 'running))
      (setq keep (typGetGlobalData &ovGODTimeStop; 'keep-running))
      (if (and (not keep) oID) (block nil
        (objRemoveOverlay gPlayerShip oID)
        (typSetGlobalData &ovGODTimeStop; 'running nil)
      ))
    )))

    (dsf/filter-screen)
    (dsf/show-screen)
  )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    )
  </Globals>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; {{{ CORE ITEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <ItemType UNID="&itGODCoreHook;"
    name=           "G.O.D."
    virtual=        "true"
    usekey=         "G"
    >
    <Image imageID="&rsItems1;" imageX="0" imageY="576" imageWidth="96" imageHeight="96"/>
    <Invoke>
      (god/core-screen)
    </Invoke>
  </ItemType>

  <StationType UNID="&stGODCoreStation;"
    virtual="true"
    >
    <Events>
      <OnGlobalPlayerEnteredSystem>
        (block (itm)
          (if (not (objHasItem gPlayerShip (setq itm (itmCreate &itGODCoreHook; 1))))
            (objAddItem gPlayerShip itm)
          )
        )
      </OnGlobalPlayerEnteredSystem>
    </Events>
  </StationType>

  <OverlayType UNID="&ovGODTimeStop;">
    <Events>
      <OnUpdate>
        (sysStopTime 30 gPlayerShip)
      </OnUpdate>
    </Events>
  </OverlayType>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  <Globals>
    (block Nil

;;; ITEM BROWSER  {{{

    ;; TODO rewrite this screen to identify all items by default and un-id them on the way out
    (setq god/item-browser (lambda (criteria)
      (block nil
        (dsf/item-browser (map (itmGetTypes criteria) itm (itmCreate itm 1)))

        (god/add-to-cargo-action 'add-to-cargo gPlayerShip)
        ;(dsf/add-action 'add-to-cargo '("Add to Cargo Hold" 'A) (lambda nil
        ;  (block nil
        ;    (if (eq (dsf/get-pane) 'counter)
        ;      (block (cnt itm inventory)
        ;        ;; add item
        ;        (setq cnt (dsf/get-counter))
        ;        (setq itm (itmCreate (itmGetType (dsf/get-item)) cnt))
        ;        (objAddItem gPlayerShip itm)
        ;        (dsf/set-pane 'default)
        ;        (dsf/set-action-handle 'add-to-cargo '("Add to Cargo Hold" 'A))
        ;        (dsf/notify "Your request has been fulfilled")
        ;      )
        ;      (block nil
        ;        (dsf/set-pane 'counter)
        ;        (dsf/set-default-counter 1)
        ;        (dsf/set-action-handle 'add-to-cargo '("Accept Transaction" 'A))
        ;        (dsf/notify (cat "Select the amount of \"" (itmGetName (dsf/get-item) 3) "\" you want to add to your cargo hold"))
        ;      )
        ;    )
        ;  )
        ;))
        (dsf/set-default-action 'add-to-cargo)

        (dsf/add-action 'install '("Install Item" 'N) (lambda nil
          (block (itm result)
            (setq itm (dsf/get-item))
            (if (not (itmIsKnown itm))
              (itmSetKnown itm)
            )
            (setq result (god/install-item itm nil nil))
            (dsf/notify (item result 1))
          )
        ))
        (dsf/set-no-save 'install true)
        (dsf/set-disable-action 'install (lambda nil
          (or (not (dsf/get-item)) (not (itmMatches (dsf/get-item) "d")))
        ))

        ;(dsf/add-action 'identify-single "Identify Current Item" 'C (lambda nil
        ;  (block (itm)
        ;    (setq itm (dsf/get-item))
        ;    (itmSetKnown itm)
        ;    (dsf/set-description "Identified item")
        ;  )
        ;))
        ;(dsf/set-no-save 'identify-single true)
        ;(dsf/set-disable-action 'identify-single (lambda nil (block (itm)
        ;  (or (not (setq itm (dsf/get-item))) (itmIsKnown itm))
        ;)))

        ;(dsf/add-action 'identify-all "Identify All Items" 'I (lambda nil
        ;  (block nil
        ;    (enum (itmGetTypes criteria) itm (block nil
        ;      (itmSetKnown itm)
        ;    ))
        ;    (dsf/set-description "Identified all items")
        ;  )
        ;))
        ;(dsf/set-no-save 'identify-all true)
        ;(dsf/set-disable-action 'identify-all (lambda nil (not (dsf/get-item))))
      )
    ))

;;; END ITEM BROWSER  }}}

;;; REFUEL / RESTORE  {{{

    (setq god/refuel-player (lambda nil
      ;; pump it full of Longzhu's
      (shpRefuelFromItem gPlayerShip (itmCreate &itLongzhuSphere; 2000))
    ))

    (setq god/restore-target (lambda (target)
      (block nil

        (if (objIsShip target) (block nil
          ;; fix states
          (objFixParalysis target)
          (shpFixBlindness target)
          (shpDecontaminate target)

          ;; repair shields
          (shpRechargeShield target 99999999)

          ; repair all items/devices
          (objEnumItems target "*~a D" itm (shpRepairItem target itm))

          ;; refuel
          (if (eq gPlayerShip target) (block nil
            (god/refuel-player)

            ;; fix domina and ranks
            (typSetGlobalData &stDomina; "lastInvokeTime1" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime2" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime3" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime4" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime5" 0)
            (typSetGlobalData &stDomina; "lastInvokeTime6" 0)

          ))
        ))

        ;; repair armor
        (objEnumItems target "a" armor
          (objRepairArmor target armor)
        )

      )
    ))
;;; END REFUEL / RESTORE  }}}

;;; ADD TO CARGO ACTION  {{{

  ;; TODO perhaps this can be abstracted into a general purpose
  ;;      "set count" screen
  (setq god/add-to-cargo-action (lambda (label target)
    (block nil
      (dsf/add-action label '("Add to Cargo Hold" 'A) (lambda nil
        (block nil
          (if (eq (dsf/get-pane) 'counter)
            (block (cnt itm)
              ;; add item
              (setq cnt (dsf/get-counter))
              (setq itm (itmCreate (itmGetType (dsf/get-item)) cnt))
              (objAddItem target itm)
              (dsf/set-pane 'default)
              (dsf/set-action-handle label '("Add to Cargo Hold" 'A))
              (dsf/notify (cat "Added " cnt " " (itmGetName itm (int (fn/plural cnt 1 3))) " to cargo hold"))
            )
            (block nil
              (dsf/set-pane 'counter)
              (dsf/set-default-counter 1)
              (dsf/set-action-handle label '("Accept Transaction" 'A))
              (dsf/notify (cat "Select the amount of \"" (itmGetName (dsf/get-item) 3) "\" you want to add to the cargo hold"))
            )
          )
        )
      ))
      (dsf/set-no-save label)
      (dsf/set-disable-action label '(dsf/list-is-empty))
    )
  ))

;;; END ADD TO CARGO ACTION  }}}

;;; INSTALL ITEM {{{

    ;; Install an item, using the normal rules, or forcefully.
    ;; We return a tuple with an code and a message
    ;;
    ;; - normal
    ;;   Use the normal rules for installing
    ;; - cargo
    ;;   We have the item in our cargo already
    ;; - target
    ;;   Which ship to install on
    (setq god/install-item (lambda (itm normal inCargo target)
      (block (canInstall result code)
        ;; if we don't have a target, it is the player
        (if (not target) (setq target gPlayerShip))

        (setq canInstall (shpCanInstallDevice target itm))

        (switch
          (and (itmHasAttribute itm "Military") (not (objGetItems gPlayerShip "*+MilitaryID")))
            (setq result '(1 "You must have a military ID to install this item."))
          (eq canInstall 2)
            (setq result '(2 "Your ship cannot support any more devices."))
          (and (itmHasAttribute itm "Illegal") (not (objGetItems gPlayerShip "*+BlackMarketID")))
            (setq result '(3 "You must have a black market ID to install this item."))
          (eq canInstall 4)
            (setq result '(4 "Your ship already has a shield generator installed."))
          (eq canInstall 5)
            (setq result '(5 "Your ship already has a propulsion system installed."))
          (eq canInstall 6)
            (setq result '(6 "Your ship already has a missile launcher installed."))
          (eq canInstall 7)
            (setq result '(7 "Your ship's reactor is not powerful enough for this device."))
          (eq canInstall 8)
            (setq result '(8 "Your ship already has a cargo expansion system installed."))
          (eq canInstall 9)
            (setq result '(9 "Your ship already has a reactor installed."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 10)
            (setq result '(10 "The cargo expansion system is too large to be installed in your ship."))
          ;; XXX: this one can perhaps be 'normal'
          (eq canInstall 11)
            (setq result '(11 "The power output of the item is too high for your ship."))
          (eq canInstall 12)
            (setq result '(12 "Your ship cannot support any more weapons."))
          (eq canInstall 13)
            (setq result '(13 "Your ship cannot support any more non-weapon devices."))
          (not (eq canInstall 0))
            (setq result '(14 "This item can not be installed."))
          (setq result '(true))
        )
        ;; if result is True, then we install right away
        (setq code (item result 0))
        (if (or code (find '(4 5 6 8 9) code) (and (not normal) (find '(1 3) code)))
          (block (name)
            (setq name (itmGetName itm 1))
            (switch
              (eq code 4)
                (setq result (list true (cat "Replaced shield generator with " name)))
              (eq code 5)
                (setq result (list true (cat "Replaced propulsion system with " name)))
              (eq code 6)
                (block Nil
                  (shpRemoveDevice target (item (objGetItems target "Il") 0))
                  (setq result (list true (cat "Replaced missile launcher with " name)))
                )
              (eq code 8)
                (setq result (list true (cat "Replaced current cargo expansion with " name)))
              (eq code 9)
                (setq result (list true (cat "Replaced reactor with " name)))
              (setq result (list true (cat "Installed " name)))
            )
            (if (not inCargo) (objAddItem target itm))
            (shpInstallDevice target itm)
          )
        )
        result
      )
    ))

;;; END INSTALL ITEM }}}

    )
  </Globals>

  <Modules>
    <Module filename="ModuleTarget.xml"/>
    <Module filename="ModuleEnhancements.xml"/>
  </Modules>

</TranscendenceExtension>
<!--
vim:ts=2:sw=2:sts=2:ft=tscript:
-->
