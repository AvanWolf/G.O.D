<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
    <!ENTITY modGODModuleTravel      "0xDCBA0511">
]>

<TranscendenceExtension
  UNID="&modGODModuleTravel;"
  name="G.O.D. Module - Travel"
  credits="alterecco"
  version="1.0">

<!--
;   License:
;     Public Domain - alterecco@gmail.com - 2010
-->

  <Globals>
    (block (module)

    (setq module (list
      '( (weight     3)
         (title      "Galaxy Travel")
         (subtitle   "Travel to any place in the galaxy.")
         (action     (god/travel-galaxy)))

      '( (weight     3)
         (title      "System Travel")
         (subtitle   "Travel to somewhere in the current system")
         (action     (god/travel-system)))
    ))

    ;; handle modules
    (setq god/modules (if (isError god/modules)
      module
      (append god/modules module)
    ))

    (setq god/travel-galaxy (lambda nil
      (block ((systems (sysGetNodes))
              (current (sysGetNode))
              (data (list)))

        (dsf/screen 'travel-galaxy "Travel Galaxy")
        (dsf/filter-screen)

        ;; TODO: build a much more advanced system list (in correct order)
        ;; sort by level
        (setq systems (dsf/list-sort systems a b (ls (sysGetLevel a) (sysGetLevel b))))
        ;; filter out endgame (or any others systems with no gates)
        (setq systems (filter systems s (gr (count (sysGetStargates s)) 0)))

        ;; build a custompicker list
        (enum systems s (if (not (eq s current))
          (lnkAppend data (list
            (list 'title (sysGetName s))
            (list 'node s)
          ))
        ))
        (dsf/list-data data)

        (dsf/action 'gate "Gate to System" 'G (lambda nil (block (node gate)
          (setq node (dsf/list-entry 'node))
          (setq gate (item (sysGetStargates node) 0))
          (objGateTo gPlayerShip node gate &efStargateOut;)
          (plyMessage gPlayer (cat "Gated to " (sysGetName node)))
          (dsf/exit)
        )))

        (dsf/back-action)
        (dsf/exit-action)
        (dsf/show-screen)
      )
    ))

    (setq god/travel-system (lambda nil
      (block (default-term exp)

        (setq default-term "TAMF")

        ;; build an expression to filter the data by.
        ;; In reality we do all the data generation in here
        (setq exp (lambda (data) (block (term objects (data (list)))
          (setq term (or (dsf/data-get 'filter-term) default-term))
          (setq term (god/split-filter term))
          (if (isAtom term)
            (setq objects (sysFindObject gPlayerShip term))
            (setq objects (sysFindObject gPlayerShip (item term 0)))
          )
          (enum objects o (lnkAppend data (list
            (list 'title (objGetName o))
            (list 'obj o)
          )))
          (if (not (isAtom term)) (block nil
            (setq objects (list))
            (enum data el (if (strFind (dsf/hash-get el 'title) (item term 1))
              (lnkAppend objects el)
            ))
            (setq data objects)
          ))
          data
        )))

        (dsf/screen 'travel-system "Travel System")
        (dsf/filter-screen exp)
        (dsf/data-set 'filter-term default-term)

        (dsf/action 'jump "Jump to location" 'J (lambda nil
          (block (o)
            (setq o (dsf/list-entry 'obj))
            (objJumpTo gPlayerShip (sysVectorRandom (objGetPos o) 8 4 "*"))
            (plyMessage gPlayer (cat "Jumped to " (objGetName o)))
            (dsf/exit)
          )
        ))

        (dsf/back-action)
        (dsf/exit-action)
        (dsf/show-screen)
      )
    ))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; HELPERS
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



    ;; edge cases:
    ;;  - destination system has no gates
    ;;  - current system has only one gate and it leads somewhere
    ;;    we have already been
    ;;  - all systems have been accounted for
    (setq god/gate-list (lambda (systems current gate)
      (block (all dest)
        (setq all (sysGetNodes))
        (setq dest (sysGetStargateDestinationNode current gate))

        (switch
          (eq all systems)
            nil
          (eq (count (sysGetStargates dest)) 0)
            nil
        )
      )
    ))

    )
  </Globals>

</TranscendenceExtension>
<!--
vim:ts=2:sw=2:sts=2:ft=tscript:
-->
